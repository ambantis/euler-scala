package net.euler

/**
 * Distinct powers
 *
 * Consider all integer combinations of a**b for 2 <= a <= 5 and 2 <= b <= 5:
 *           2**2=4, 2**3=8, 2**4=16, 2**5=32
 *           3**2=9, 3**3=27, 3**4=81, 3**5=243
 *           4**2=16, 4**3=64, 4**4=256, 4**5=1024
 *           5**2=25, 5**3=125, 5**4=625, 5**6=3125
 *
 * If they are then placed in numerical order, with any repeats removed, we get
 * the following sequence of 15 distinct terms:
 *
 *           4, 8, 9, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by a**b for 2 <= a <= 100
 * and 2 <= b <= 100
 *
 * User: Alexandros Bantis
 * Date: 4/27/13
 * Time: 12:34 PM
 */
object Problem029 {

  def genDistinctTerms(limit: Int): List[BigInt] = {
    val terms: List[BigInt] =
      for {
        a <- (2 to limit).toList.map(x => BigInt(x))
        b <- (2 to limit)
        combo = a.pow(b)
    } yield combo
    terms.toList.distinct.sortWith(_ < _)
  }
}